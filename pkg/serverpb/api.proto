syntax = "proto3";

package dkv.serverpb;
option go_package = "github.com/flipkart-incubator/dkv/pkg/serverpb";

service DKV {
  // Put puts the given key into the key value store.
  rpc Put (PutRequest) returns (PutResponse);

  // Delete deletes the given key from the key value store.
  rpc Delete (DeleteRequest) returns (DeleteResponse);

  // Get gets the value associated with the given key from the key value store.
  rpc Get (GetRequest) returns (GetResponse);

  // MultiGet gets the values associated with given keys from the key value store.
  rpc MultiGet (MultiGetRequest) returns (MultiGetResponse);

  // Iterate iterates through the entire keyspace in no particular order and
  // returns the results as a stream of key value pairs.
  rpc Iterate (IterateRequest) returns (stream IterateResponse);

  // CompareAndSet offers the standard CAS style transaction over a given
  // key. Intended to be used in concurrent workloads with less contention.
  rpc CompareAndSet (CompareAndSetRequest) returns (CompareAndSetResponse);
}

message CompareAndSetRequest {
  // Key is the given key that is involved with this CAS request.
  bytes key = 1;
  // OldValue is the expected value for comparison.
  bytes oldValue = 2;
  // NewValue is the value set once the comparison is successful.
  bytes newValue = 3;
}

message CompareAndSetResponse {
  // Status indicates the result of the compare and set operation.
  Status status = 1;
  // Updated indicates if the given new value was overwritten following
  // a successful comparison with the given old value.
  bool updated = 2;
}

message Status {
  // Code captures the error code of the underlying operation.
  // A non zero error code is considered to be a failure.
  int32 code = 1;
  // Message captures if any the error message of the failed operation.
  string message = 2;
}

message PutRequest {
  // Key is the key, in bytes, to put into the key value store.
  bytes key = 1;
  // Value is the value, in bytes, to associate with the key in the key value store.
  bytes value = 2;
  // expireTS is the epoch seconds value, in int64 to associate with the key in the key value store.
  uint64 expireTS = 3;
}

message PutResponse {
  // Status indicates the result of the Put operation.
  Status status = 1;
}

message DeleteRequest {
  // Key is the key, in bytes, to delete from the key value store.
  bytes key = 1;
}

message DeleteResponse {
  // Status indicates the result of the Delete operation.
  Status status = 1;
}

// ReadConsistency indicates the desired level of consistency for read requests.
enum ReadConsistency {
  // Sequential or timeline consistency - fetches results from local node storage.
  SEQUENTIAL = 0;
  // Linearizable consistency - fetches results from local node storage only after
  // ensuring quorum with other DKV nodes.
  LINEARIZABLE = 1;
}

message GetRequest {
  // Key is the key, in bytes, whose associated value is loaded from the key value store.
  bytes key = 1;
  // Desired read consistency level for this GET request.
  ReadConsistency readConsistency = 2;
}

message GetResponse {
  // Status indicates the result of the Get operation.
  Status status = 1;
  // Value is the value, in bytes, that is associated with the given key in the key value store.
  bytes value = 2;
}

message MultiGetRequest {
  // Keys is the collection of keys whose values are returned from the bulk Get operation.
  repeated bytes keys = 1;
  // Desired read consistency level for this MultiGet request.
  ReadConsistency readConsistency = 2;
}

message KVPair {
  // Key is the DKV key
  bytes key = 1;
  // Value is the value associated with a given key
  bytes value = 2;
}

message MultiGetResponse {
  // Status indicates the result of the bulk Get operation.
  Status status = 1;
  // Association of keys and values of the bulk Get operation.
  repeated KVPair keyValues = 2;
}

message IterateRequest {
  // KeyPrefix can be used to iterate through keys that have this prefix.
  bytes keyPrefix = 1;
  // StartKey can be used to begin the iteration from the specified key.
  bytes startKey = 2;
}

message IterateResponse {
  // Status captures any errors with the current iteration.
  Status status = 1;
  // Key of the current iteration.
  bytes key = 2;
  // Value of the current iteration.
  bytes value = 3;
}
