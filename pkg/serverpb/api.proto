syntax = "proto3";
import "google/protobuf/empty.proto";
package dkv.serverpb;
option go_package = "serverpb";

service DKV {
  // Put puts the given key into the key value store.
  rpc Put (PutRequest) returns (PutResponse);

  // Delete deletes the given key from the key value store.
  rpc Delete (DeleteRequest) returns (DeleteResponse);

  // Get gets the value associated with the given key from the key value store.
  rpc Get (GetRequest) returns (GetResponse);

  // MultiGet gets the values associated with given keys from the key value store.
  rpc MultiGet (MultiGetRequest) returns (MultiGetResponse);

  // Iterate iterates through the entire keyspace in no particular order and
  // returns the results as a stream of key value pairs.
  rpc Iterate (IterateRequest) returns (stream IterateResponse);

  // CompareAndSet offers the standard CAS style transaction over a given
  // key. Intended to be used in concurrent workloads with less contention.
  rpc CompareAndSet (CompareAndSetRequest) returns (CompareAndSetResponse);
}

message CompareAndSetRequest {
  // Key is the given key that is involved with this CAS request.
  bytes key = 1;
  // OldValue is the expected value for comparison.
  bytes oldValue = 2;
  // NewValue is the value set once the comparison is successful.
  bytes newValue = 3;
}

message CompareAndSetResponse {
  // Status indicates the result of the compare and set operation.
  Status status = 1;
  // Updated indicates if the given new value was overwritten following
  // a successful comparison with the given old value.
  bool updated = 2;
}

message Status {
  // Code captures the error code of the underlying operation.
  // A non zero error code is considered to be a failure.
  int32 code = 1;
  // Message captures if any the error message of the failed operation.
  string message = 2;
}

message PutRequest {
  // Key is the key, in bytes, to put into the key value store.
  bytes key = 1;
  // Value is the value, in bytes, to associate with the key in the key value store.
  bytes value = 2;
  // expireTS is the epoch seconds value, in int64 to associate with the key in the key value store.
  uint64 expireTS = 3;
}

message PutResponse {
  // Status indicates the result of the Put operation.
  Status status = 1;
}

message DeleteRequest {
  // Key is the key, in bytes, to delete from the key value store.
  bytes key = 1;
}

message DeleteResponse {
  // Status indicates the result of the Delete operation.
  Status status = 1;
}

// ReadConsistency indicates the desired level of consistency for read requests.
enum ReadConsistency {
  // Sequential or timeline consistency - fetches results from local node storage.
  SEQUENTIAL = 0;
  // Linearizable consistency - fetches results from local node storage only after
  // ensuring quorum with other DKV nodes.
  LINEARIZABLE = 1;
}

message GetRequest {
  // Key is the key, in bytes, whose associated value is loaded from the key value store.
  bytes key = 1;
  // Desired read consistency level for this GET request.
  ReadConsistency readConsistency = 2;
}

message GetResponse {
  // Status indicates the result of the Get operation.
  Status status = 1;
  // Value is the value, in bytes, that is associated with the given key in the key value store.
  bytes value = 2;
}

message MultiGetRequest {
  // Keys is the collection of keys whose values are returned from the bulk Get operation.
  repeated bytes keys = 1;
  // Desired read consistency level for this MultiGet request.
  ReadConsistency readConsistency = 2;
}

message KVPair {
  // Key is the DKV key
  bytes key = 1;
  // Value is the value associated with a given key
  bytes value = 2;
}

message MultiGetResponse {
  // Status indicates the result of the bulk Get operation.
  Status status = 1;
  // Association of keys and values of the bulk Get operation.
  repeated KVPair keyValues = 2;
}

message IterateRequest {
  // KeyPrefix can be used to iterate through keys that have this prefix.
  bytes keyPrefix = 1;
  // StartKey can be used to begin the iteration from the specified key.
  bytes startKey = 2;
}

message IterateResponse {
  // Status captures any errors with the current iteration.
  Status status = 1;
  // Key of the current iteration.
  bytes key = 2;
  // Value of the current iteration.
  bytes value = 3;
}

service DKVReplication {
  // GetChanges retrieves all changes from a given change number.
  rpc GetChanges (GetChangesRequest) returns (GetChangesResponse);
  // AddReplica registers a new replica with the current master.
  rpc AddReplica (Replica) returns (Status);
  // RemoveReplica deregisters given replica from the current master.
  rpc RemoveReplica (Replica) returns (Status);
  // GetReplicas retrieves all the replicas of the current master.
  rpc GetReplicas (GetReplicasRequest) returns (GetReplicasResponse);
}

message GetReplicasRequest {
  // Zone identifier to use for looking up replicas of the current master.
  string zone = 1;
}

message GetReplicasResponse {
  // Replicas are all the replicas of the current master.
  repeated Replica replicas = 1;
}

message Replica {
  // Zone identifier of the replica.
  string zone = 1;
  // Hostname of the replica.
  string hostname = 2;
  // GRPC port of the replica.
  uint32 port = 3;
}

message GetChangesRequest {
  // FromChangeNumber is the starting change number from which to retrieve changes.
  uint64 fromChangeNumber = 1;
  // MaxNumberOfChanges is the maximum number of changes to return from this invocation.
  uint32 maxNumberOfChanges = 2;
}

message GetChangesResponse {
  // Status indicates the result of the GetChanges operation.
  Status status = 1;
  // MasterChangeNumber indicates the latest change number on master node.
  uint64 masterChangeNumber = 2;
  // NumberOfChanges indicates the number of change records in the response.
  uint32 numberOfChanges = 3;
  // Changes is the collection of change records.
  repeated ChangeRecord changes = 4;
}

message ChangeRecord {
  // SerialisedForm is the internal byte array representation of this change record.
  bytes serialisedForm = 1;
  // ChangeNumber indicates the change number of this change record.
  uint64 changeNumber = 2;
  // NumberOfTrxns indicates the number of transactions associated with this change record.
  uint32 numberOfTrxns = 3;
  // Trxns is the collection of transaction records associated with this change record.
  repeated TrxnRecord trxns = 4;
}

message TrxnRecord {
  enum TrxnType {
    Unknown = 0;
    Put = 1;
    Delete = 2;
  }
  // Type indicates the type of this transaction - Put, Delete, etc.
  TrxnType type = 1;
  // Key is the byte array representation of the key associated with this transaction.
  bytes key = 2;
  // Value is the byte array representation of the value associated with this transaction.
  bytes value = 3;
  // expireTS is the epoch seconds value, in int64 to associate with the key in the key value store.
  uint64 expireTS = 4;
}

service DKVBackupRestore {
  // Backup backs up the entire keyspace into the given filesystem location.
  rpc Backup (BackupRequest) returns (Status);
  // Restore restores the entire keyspace from an existing backup at the
  // given filesystem location.
  rpc Restore (RestoreRequest) returns (Status);
}

message BackupRequest {
  // BackupPath indicates a filesystem folder or file used for backing up the keyspace.
  string backupPath = 1;
}

message RestoreRequest {
  // RestorePath indicates a filesystem folder or file used for restoring the keyspace.
  string restorePath = 1;
}

service DKVCluster {
  // AddNode adds the given DKV node to the cluster that the
  // current node is a member of.
  rpc AddNode (AddNodeRequest) returns (Status);
  // RemoveNode removes the given DKV node from the cluster that
  // the current node is a member of.
  rpc RemoveNode (RemoveNodeRequest) returns (Status);
  // ListNodes retrieves the current set of DKV nodes from
  // the Nexus cluster.
  rpc ListNodes (google.protobuf.Empty) returns (ListNodesResponse);
}

message ListNodesResponse {
  // Status indicates the status of the list nodes operation.
  Status status = 1;
  // Leader represents the identifier of the leader node.
  uint64 leader = 2;
  // Nodes represents the members of the cluster identified by
  // their respective identifier and the Nexus URL.
  map<uint64, string> nodes = 3;
}

message AddNodeRequest {
  // NodeUrl represents the URL for the Nexus service running on
  // the node that needs to be added to the cluster. Other Nexus
  // peers communicate with this node on this service.
  string nodeUrl = 1;
}

message RemoveNodeRequest {
  // NodeUrl represents the URL for the Nexus service running on
  // the node that needs to be removed from the cluster.
  string nodeUrl = 1;
}

