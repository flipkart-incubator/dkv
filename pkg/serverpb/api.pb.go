// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: pkg/serverpb/api.proto

package serverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReadConsistency indicates the desired level of consistency for read requests.
type ReadConsistency int32

const (
	// Sequential or timeline consistency - fetches results from local node storage.
	ReadConsistency_SEQUENTIAL ReadConsistency = 0
	// Linearizable consistency - fetches results from local node storage only after
	// ensuring quorum with other DKV nodes.
	ReadConsistency_LINEARIZABLE ReadConsistency = 1
)

// Enum value maps for ReadConsistency.
var (
	ReadConsistency_name = map[int32]string{
		0: "SEQUENTIAL",
		1: "LINEARIZABLE",
	}
	ReadConsistency_value = map[string]int32{
		"SEQUENTIAL":   0,
		"LINEARIZABLE": 1,
	}
)

func (x ReadConsistency) Enum() *ReadConsistency {
	p := new(ReadConsistency)
	*p = x
	return p
}

func (x ReadConsistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadConsistency) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_serverpb_api_proto_enumTypes[0].Descriptor()
}

func (ReadConsistency) Type() protoreflect.EnumType {
	return &file_pkg_serverpb_api_proto_enumTypes[0]
}

func (x ReadConsistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadConsistency.Descriptor instead.
func (ReadConsistency) EnumDescriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{0}
}

type CompareAndSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the given key that is involved with this CAS request.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// OldValue is the expected value for comparison.
	OldValue []byte `protobuf:"bytes,2,opt,name=oldValue,proto3" json:"oldValue,omitempty"`
	// NewValue is the value set once the comparison is successful.
	NewValue []byte `protobuf:"bytes,3,opt,name=newValue,proto3" json:"newValue,omitempty"`
}

func (x *CompareAndSetRequest) Reset() {
	*x = CompareAndSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareAndSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareAndSetRequest) ProtoMessage() {}

func (x *CompareAndSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareAndSetRequest.ProtoReflect.Descriptor instead.
func (*CompareAndSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{0}
}

func (x *CompareAndSetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CompareAndSetRequest) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *CompareAndSetRequest) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type CompareAndSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status indicates the result of the compare and set operation.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Updated indicates if the given new value was overwritten following
	// a successful comparison with the given old value.
	Updated bool `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *CompareAndSetResponse) Reset() {
	*x = CompareAndSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareAndSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareAndSetResponse) ProtoMessage() {}

func (x *CompareAndSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareAndSetResponse.ProtoReflect.Descriptor instead.
func (*CompareAndSetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{1}
}

func (x *CompareAndSetResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompareAndSetResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code captures the error code of the underlying operation.
	// A non zero error code is considered to be a failure.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Message captures if any the error message of the failed operation.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key, in bytes, to put into the key value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the value, in bytes, to associate with the key in the key value store.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// expireTS is the epoch seconds value, in int64 to associate with the key in the key value store.
	ExpireTS uint64 `protobuf:"varint,3,opt,name=expireTS,proto3" json:"expireTS,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{3}
}

func (x *PutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutRequest) GetExpireTS() uint64 {
	if x != nil {
		return x.ExpireTS
	}
	return 0
}

type MultiPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PutRequest []*PutRequest `protobuf:"bytes,1,rep,name=putRequest,proto3" json:"putRequest,omitempty"`
}

func (x *MultiPutRequest) Reset() {
	*x = MultiPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPutRequest) ProtoMessage() {}

func (x *MultiPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPutRequest.ProtoReflect.Descriptor instead.
func (*MultiPutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{4}
}

func (x *MultiPutRequest) GetPutRequest() []*PutRequest {
	if x != nil {
		return x.PutRequest
	}
	return nil
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status indicates the result of the Put operation.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{5}
}

func (x *PutResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key, in bytes, to delete from the key value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status indicates the result of the Delete operation.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key, in bytes, whose associated value is loaded from the key value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Desired read consistency level for this GET request.
	ReadConsistency ReadConsistency `protobuf:"varint,2,opt,name=readConsistency,proto3,enum=dkv.serverpb.ReadConsistency" json:"readConsistency,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRequest) GetReadConsistency() ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return ReadConsistency_SEQUENTIAL
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status indicates the result of the Get operation.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Value is the value, in bytes, that is associated with the given key in the key value store.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MultiGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys is the collection of keys whose values are returned from the bulk Get operation.
	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Desired read consistency level for this MultiGet request.
	ReadConsistency ReadConsistency `protobuf:"varint,2,opt,name=readConsistency,proto3,enum=dkv.serverpb.ReadConsistency" json:"readConsistency,omitempty"`
}

func (x *MultiGetRequest) Reset() {
	*x = MultiGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGetRequest) ProtoMessage() {}

func (x *MultiGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGetRequest.ProtoReflect.Descriptor instead.
func (*MultiGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{10}
}

func (x *MultiGetRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MultiGetRequest) GetReadConsistency() ReadConsistency {
	if x != nil {
		return x.ReadConsistency
	}
	return ReadConsistency_SEQUENTIAL
}

type KVPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the DKV key
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the value associated with a given key
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KVPair) Reset() {
	*x = KVPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPair) ProtoMessage() {}

func (x *KVPair) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPair.ProtoReflect.Descriptor instead.
func (*KVPair) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{11}
}

func (x *KVPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KVPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MultiGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status indicates the result of the bulk Get operation.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Association of keys and values of the bulk Get operation.
	KeyValues []*KVPair `protobuf:"bytes,2,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
}

func (x *MultiGetResponse) Reset() {
	*x = MultiGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGetResponse) ProtoMessage() {}

func (x *MultiGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGetResponse.ProtoReflect.Descriptor instead.
func (*MultiGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{12}
}

func (x *MultiGetResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MultiGetResponse) GetKeyValues() []*KVPair {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type IterateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeyPrefix can be used to iterate through keys that have this prefix.
	KeyPrefix []byte `protobuf:"bytes,1,opt,name=keyPrefix,proto3" json:"keyPrefix,omitempty"`
	// StartKey can be used to begin the iteration from the specified key.
	StartKey []byte `protobuf:"bytes,2,opt,name=startKey,proto3" json:"startKey,omitempty"`
}

func (x *IterateRequest) Reset() {
	*x = IterateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterateRequest) ProtoMessage() {}

func (x *IterateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterateRequest.ProtoReflect.Descriptor instead.
func (*IterateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{13}
}

func (x *IterateRequest) GetKeyPrefix() []byte {
	if x != nil {
		return x.KeyPrefix
	}
	return nil
}

func (x *IterateRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

type IterateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status captures any errors with the current iteration.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Key of the current iteration.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the current iteration.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IterateResponse) Reset() {
	*x = IterateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_serverpb_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterateResponse) ProtoMessage() {}

func (x *IterateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_serverpb_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterateResponse.ProtoReflect.Descriptor instead.
func (*IterateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_serverpb_api_proto_rawDescGZIP(), []int{14}
}

func (x *IterateResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IterateResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IterateResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_pkg_serverpb_api_proto protoreflect.FileDescriptor

var file_pkg_serverpb_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x50, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x53, 0x22, 0x4b, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6b, 0x76,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x67, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6b, 0x76, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x51, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0f,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64,
	0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x30, 0x0a, 0x06,
	0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74,
	0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x4b, 0x56, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x67, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x32, 0xf7,
	0x03, 0x0a, 0x03, 0x44, 0x4b, 0x56, 0x12, 0x3a, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x18, 0x2e,
	0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64,
	0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x6b, 0x76, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18,
	0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x64, 0x6b, 0x76,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x6b, 0x76, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x58,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x12,
	0x22, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x6b, 0x76, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x6b, 0x61, 0x72, 0x74, 0x2d,
	0x69, 0x6e, 0x63, 0x75, 0x62, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x6b, 0x76, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_serverpb_api_proto_rawDescOnce sync.Once
	file_pkg_serverpb_api_proto_rawDescData = file_pkg_serverpb_api_proto_rawDesc
)

func file_pkg_serverpb_api_proto_rawDescGZIP() []byte {
	file_pkg_serverpb_api_proto_rawDescOnce.Do(func() {
		file_pkg_serverpb_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_serverpb_api_proto_rawDescData)
	})
	return file_pkg_serverpb_api_proto_rawDescData
}

var file_pkg_serverpb_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_serverpb_api_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_serverpb_api_proto_goTypes = []interface{}{
	(ReadConsistency)(0),          // 0: dkv.serverpb.ReadConsistency
	(*CompareAndSetRequest)(nil),  // 1: dkv.serverpb.CompareAndSetRequest
	(*CompareAndSetResponse)(nil), // 2: dkv.serverpb.CompareAndSetResponse
	(*Status)(nil),                // 3: dkv.serverpb.Status
	(*PutRequest)(nil),            // 4: dkv.serverpb.PutRequest
	(*MultiPutRequest)(nil),       // 5: dkv.serverpb.MultiPutRequest
	(*PutResponse)(nil),           // 6: dkv.serverpb.PutResponse
	(*DeleteRequest)(nil),         // 7: dkv.serverpb.DeleteRequest
	(*DeleteResponse)(nil),        // 8: dkv.serverpb.DeleteResponse
	(*GetRequest)(nil),            // 9: dkv.serverpb.GetRequest
	(*GetResponse)(nil),           // 10: dkv.serverpb.GetResponse
	(*MultiGetRequest)(nil),       // 11: dkv.serverpb.MultiGetRequest
	(*KVPair)(nil),                // 12: dkv.serverpb.KVPair
	(*MultiGetResponse)(nil),      // 13: dkv.serverpb.MultiGetResponse
	(*IterateRequest)(nil),        // 14: dkv.serverpb.IterateRequest
	(*IterateResponse)(nil),       // 15: dkv.serverpb.IterateResponse
}
var file_pkg_serverpb_api_proto_depIdxs = []int32{
	3,  // 0: dkv.serverpb.CompareAndSetResponse.status:type_name -> dkv.serverpb.Status
	4,  // 1: dkv.serverpb.MultiPutRequest.putRequest:type_name -> dkv.serverpb.PutRequest
	3,  // 2: dkv.serverpb.PutResponse.status:type_name -> dkv.serverpb.Status
	3,  // 3: dkv.serverpb.DeleteResponse.status:type_name -> dkv.serverpb.Status
	0,  // 4: dkv.serverpb.GetRequest.readConsistency:type_name -> dkv.serverpb.ReadConsistency
	3,  // 5: dkv.serverpb.GetResponse.status:type_name -> dkv.serverpb.Status
	0,  // 6: dkv.serverpb.MultiGetRequest.readConsistency:type_name -> dkv.serverpb.ReadConsistency
	3,  // 7: dkv.serverpb.MultiGetResponse.status:type_name -> dkv.serverpb.Status
	12, // 8: dkv.serverpb.MultiGetResponse.keyValues:type_name -> dkv.serverpb.KVPair
	3,  // 9: dkv.serverpb.IterateResponse.status:type_name -> dkv.serverpb.Status
	4,  // 10: dkv.serverpb.DKV.Put:input_type -> dkv.serverpb.PutRequest
	7,  // 11: dkv.serverpb.DKV.Delete:input_type -> dkv.serverpb.DeleteRequest
	9,  // 12: dkv.serverpb.DKV.Get:input_type -> dkv.serverpb.GetRequest
	11, // 13: dkv.serverpb.DKV.MultiGet:input_type -> dkv.serverpb.MultiGetRequest
	5,  // 14: dkv.serverpb.DKV.MultiPut:input_type -> dkv.serverpb.MultiPutRequest
	14, // 15: dkv.serverpb.DKV.Iterate:input_type -> dkv.serverpb.IterateRequest
	1,  // 16: dkv.serverpb.DKV.CompareAndSet:input_type -> dkv.serverpb.CompareAndSetRequest
	6,  // 17: dkv.serverpb.DKV.Put:output_type -> dkv.serverpb.PutResponse
	8,  // 18: dkv.serverpb.DKV.Delete:output_type -> dkv.serverpb.DeleteResponse
	10, // 19: dkv.serverpb.DKV.Get:output_type -> dkv.serverpb.GetResponse
	13, // 20: dkv.serverpb.DKV.MultiGet:output_type -> dkv.serverpb.MultiGetResponse
	6,  // 21: dkv.serverpb.DKV.MultiPut:output_type -> dkv.serverpb.PutResponse
	15, // 22: dkv.serverpb.DKV.Iterate:output_type -> dkv.serverpb.IterateResponse
	2,  // 23: dkv.serverpb.DKV.CompareAndSet:output_type -> dkv.serverpb.CompareAndSetResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pkg_serverpb_api_proto_init() }
func file_pkg_serverpb_api_proto_init() {
	if File_pkg_serverpb_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_serverpb_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareAndSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareAndSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_serverpb_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_serverpb_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_serverpb_api_proto_goTypes,
		DependencyIndexes: file_pkg_serverpb_api_proto_depIdxs,
		EnumInfos:         file_pkg_serverpb_api_proto_enumTypes,
		MessageInfos:      file_pkg_serverpb_api_proto_msgTypes,
	}.Build()
	File_pkg_serverpb_api_proto = out.File
	file_pkg_serverpb_api_proto_rawDesc = nil
	file_pkg_serverpb_api_proto_goTypes = nil
	file_pkg_serverpb_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DKVClient is the client API for DKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKVClient interface {
	// Put puts the given key into the key value store.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Delete deletes the given key from the key value store.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Get gets the value associated with the given key from the key value store.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// MultiGet gets the values associated with given keys from the key value store.
	MultiGet(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error)
	// MultiPut puts the given keys into the key value store.
	MultiPut(ctx context.Context, in *MultiPutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Iterate iterates through the entire keyspace in no particular order and
	// returns the results as a stream of key value pairs.
	Iterate(ctx context.Context, in *IterateRequest, opts ...grpc.CallOption) (DKV_IterateClient, error)
	// CompareAndSet offers the standard CAS style transaction over a given
	// key. Intended to be used in concurrent workloads with less contention.
	CompareAndSet(ctx context.Context, in *CompareAndSetRequest, opts ...grpc.CallOption) (*CompareAndSetResponse, error)
}

type dKVClient struct {
	cc grpc.ClientConnInterface
}

func NewDKVClient(cc grpc.ClientConnInterface) DKVClient {
	return &dKVClient{cc}
}

func (c *dKVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) MultiGet(ctx context.Context, in *MultiGetRequest, opts ...grpc.CallOption) (*MultiGetResponse, error) {
	out := new(MultiGetResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/MultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) MultiPut(ctx context.Context, in *MultiPutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/MultiPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKVClient) Iterate(ctx context.Context, in *IterateRequest, opts ...grpc.CallOption) (DKV_IterateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DKV_serviceDesc.Streams[0], "/dkv.serverpb.DKV/Iterate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dKVIterateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DKV_IterateClient interface {
	Recv() (*IterateResponse, error)
	grpc.ClientStream
}

type dKVIterateClient struct {
	grpc.ClientStream
}

func (x *dKVIterateClient) Recv() (*IterateResponse, error) {
	m := new(IterateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dKVClient) CompareAndSet(ctx context.Context, in *CompareAndSetRequest, opts ...grpc.CallOption) (*CompareAndSetResponse, error) {
	out := new(CompareAndSetResponse)
	err := c.cc.Invoke(ctx, "/dkv.serverpb.DKV/CompareAndSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKVServer is the server API for DKV service.
type DKVServer interface {
	// Put puts the given key into the key value store.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Delete deletes the given key from the key value store.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Get gets the value associated with the given key from the key value store.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// MultiGet gets the values associated with given keys from the key value store.
	MultiGet(context.Context, *MultiGetRequest) (*MultiGetResponse, error)
	// MultiPut puts the given keys into the key value store.
	MultiPut(context.Context, *MultiPutRequest) (*PutResponse, error)
	// Iterate iterates through the entire keyspace in no particular order and
	// returns the results as a stream of key value pairs.
	Iterate(*IterateRequest, DKV_IterateServer) error
	// CompareAndSet offers the standard CAS style transaction over a given
	// key. Intended to be used in concurrent workloads with less contention.
	CompareAndSet(context.Context, *CompareAndSetRequest) (*CompareAndSetResponse, error)
}

// UnimplementedDKVServer can be embedded to have forward compatible implementations.
type UnimplementedDKVServer struct {
}

func (*UnimplementedDKVServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedDKVServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDKVServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDKVServer) MultiGet(context.Context, *MultiGetRequest) (*MultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGet not implemented")
}
func (*UnimplementedDKVServer) MultiPut(context.Context, *MultiPutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiPut not implemented")
}
func (*UnimplementedDKVServer) Iterate(*IterateRequest, DKV_IterateServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}
func (*UnimplementedDKVServer) CompareAndSet(context.Context, *CompareAndSetRequest) (*CompareAndSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareAndSet not implemented")
}

func RegisterDKVServer(s *grpc.Server, srv DKVServer) {
	s.RegisterService(&_DKV_serviceDesc, srv)
}

func _DKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_MultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).MultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/MultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).MultiGet(ctx, req.(*MultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_MultiPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).MultiPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/MultiPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).MultiPut(ctx, req.(*MultiPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKV_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IterateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DKVServer).Iterate(m, &dKVIterateServer{stream})
}

type DKV_IterateServer interface {
	Send(*IterateResponse) error
	grpc.ServerStream
}

type dKVIterateServer struct {
	grpc.ServerStream
}

func (x *dKVIterateServer) Send(m *IterateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DKV_CompareAndSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareAndSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKVServer).CompareAndSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.serverpb.DKV/CompareAndSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKVServer).CompareAndSet(ctx, req.(*CompareAndSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.serverpb.DKV",
	HandlerType: (*DKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DKV_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DKV_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DKV_Get_Handler,
		},
		{
			MethodName: "MultiGet",
			Handler:    _DKV_MultiGet_Handler,
		},
		{
			MethodName: "MultiPut",
			Handler:    _DKV_MultiPut_Handler,
		},
		{
			MethodName: "CompareAndSet",
			Handler:    _DKV_CompareAndSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iterate",
			Handler:       _DKV_Iterate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/serverpb/api.proto",
}
