syntax = "proto3";
import "google/protobuf/empty.proto";
import "pkg/serverpb/api.proto";
import "models/internal.proto";

package dkv.serverpb;
option go_package = "github.com/flipkart-incubator/dkv/pkg/serverpb";

service DKVReplication {
  // GetChanges retrieves all changes from a given change number.
  rpc GetChanges (GetChangesRequest) returns (GetChangesResponse);
  // AddReplica registers a new replica with the current master.
  rpc AddReplica (Replica) returns (Status);
  // RemoveReplica deregisters given replica from the current master.
  rpc RemoveReplica (Replica) returns (Status);
  // GetReplicas retrieves all the replicas of the current master.
  rpc GetReplicas (GetReplicasRequest) returns (GetReplicasResponse);
}

message GetReplicasRequest {
  // Zone identifier to use for looking up replicas of the current master.
  string zone = 1;
}

message GetReplicasResponse {
  // Replicas are all the replicas of the current master.
  repeated Replica replicas = 1;
}

message Replica {
  // Zone identifier of the replica.
  string zone = 1;
  // Hostname of the replica.
  string hostname = 2;
  // GRPC port of the replica.
  uint32 port = 3;
}

message GetChangesRequest {
  // FromChangeNumber is the starting change number from which to retrieve changes.
  uint64 fromChangeNumber = 1;
  // MaxNumberOfChanges is the maximum number of changes to return from this invocation.
  uint32 maxNumberOfChanges = 2;
}

message GetChangesResponse {
  // Status indicates the result of the GetChanges operation.
  Status status = 1;
  // MasterChangeNumber indicates the latest change number on master node.
  uint64 masterChangeNumber = 2;
  // NumberOfChanges indicates the number of change records in the response.
  uint32 numberOfChanges = 3;
  // Changes is the collection of change records.
  repeated ChangeRecord changes = 4;
}

message ChangeRecord {
  // SerialisedForm is the internal byte array representation of this change record.
  bytes serialisedForm = 1;
  // ChangeNumber indicates the change number of this change record.
  uint64 changeNumber = 2;
  // NumberOfTrxns indicates the number of transactions associated with this change record.
  uint32 numberOfTrxns = 3;
  // Trxns is the collection of transaction records associated with this change record.
  repeated TrxnRecord trxns = 4;
}

message TrxnRecord {
  enum TrxnType {
    Unknown = 0;
    Put = 1;
    Delete = 2;
  }
  // Type indicates the type of this transaction - Put, Delete, etc.
  TrxnType type = 1;
  // Key is the byte array representation of the key associated with this transaction.
  bytes key = 2;
  // Value is the byte array representation of the value associated with this transaction.
  bytes value = 3;
  // expireTS is the epoch seconds value, in int64 to associate with the key in the key value store.
  uint64 expireTS = 4;
}

service DKVBackupRestore {
  // Backup backs up the entire keyspace into the given filesystem location.
  rpc Backup (BackupRequest) returns (Status);
  // Restore restores the entire keyspace from an existing backup at the
  // given filesystem location.
  rpc Restore (RestoreRequest) returns (Status);
}

message BackupRequest {
  // BackupPath indicates a filesystem folder or file used for backing up the keyspace.
  string backupPath = 1;
}

message RestoreRequest {
  // RestorePath indicates a filesystem folder or file used for restoring the keyspace.
  string restorePath = 1;
}

service DKVCluster {
  // AddNode adds the given DKV node to the cluster that the
  // current node is a member of.
  rpc AddNode (AddNodeRequest) returns (Status);
  // RemoveNode removes the given DKV node from the cluster that
  // the current node is a member of.
  rpc RemoveNode (RemoveNodeRequest) returns (Status);
  // ListNodes retrieves the current set of DKV nodes from
  // the Nexus cluster.
  rpc ListNodes (google.protobuf.Empty) returns (ListNodesResponse);
}

message ListNodesResponse {
  // Status indicates the status of the list nodes operation.
  Status status = 1;
  // Leader represents the identifier of the leader node.
  uint64 leader = 2;
  // Nodes represents the members of the cluster identified by
  // their respective identifier and the Nexus URL.
  map<uint64, models.NodeInfo> nodes = 3;
}

message AddNodeRequest {
  // NodeUrl represents the URL for the Nexus service running on
  // the node that needs to be added to the cluster. Other Nexus
  // peers communicate with this node on this service.
  string nodeUrl = 1;
}

message RemoveNodeRequest {
  // NodeUrl represents the URL for the Nexus service running on
  // the node that needs to be removed from the cluster.
  string nodeUrl = 1;
}

// This service is responsible for all interactions with discovery service
// to get cluster status info
service DKVDiscovery {
  // Update status of the given database and vBucket
  rpc UpdateStatus (UpdateStatusRequest) returns (Status);
  // Retrieve all active nodes in cluster with their status after filtering based on request params
  rpc GetClusterInfo (GetClusterInfoRequest) returns (GetClusterInfoResponse);
}

// This hosts the grpc methods that each dkv node must implement for the cluster functionality.
service DKVDiscoveryNode {
  // Get status of region
  rpc GetStatus (google.protobuf.Empty) returns (RegionInfo);

}

// This hosts the grpc methods for checking the health of various different
// kinds of dkv servers i.e. slave, raft leader, raft follower
service HealthCheck {
  // Check offers the standard GRPC health checks on the underlying implementation
  // of the key value store.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // Watch offers standard GRPC streaming health check on the underlying implementation
  // of the key value store
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

message UpdateStatusRequest {
  RegionInfo regionInfo = 1;
  // Time at which the status was sent from the respective node
  uint64 timestamp = 2;
}

// Get cluster info filtered on request params
message GetClusterInfoRequest {
  // Identifier of datacenter / availability zone
  optional string dcID = 1;
  // Database identifier
  optional string database = 2;
  // Shard / vBucket identifier
  optional string vBucket = 3;
}

message GetClusterInfoResponse {
  repeated RegionInfo regionInfos = 1;
}

message RegionInfo {
  // Identifier of datacenter / availability zone
  // Slaves will prefer to select master within same dcId ,
  // Local DC followers will be created for every unique dcId
  string dcID = 1;
  // Address to communicate with this node
  // Should be equal to listen-addr used for the node whose status is being updated
  string nodeAddress = 2;
  // Database identifier
  string database = 3;
  // Shard / vBucket identifier
  string vBucket = 4;
  // Status of the region
  RegionStatus status = 5;
  // Master host of the region whose status is being updated
  // Applicable only for slaves. Used to load balance among various possible masters
  optional string masterHost = 6;
  // Nexus cluster url of the region
  // Will be used by new followers to discover the raft cluster
  optional string nexusClusterUrl = 7;
}

enum RegionStatus {
  // A node in this status isn't supposed to be serving any requests - both for clients and servers (slaves)
  // When committed entry of master - node > X, node being brought up / down, node is partitioned from cluster, etc
  // Applicable for both slaves and members of raft quorum.
  INACTIVE = 0;
  // Master of the raft quorum - 1 node within the shard
  LEADER = 1;
  // Member of the raft quorum which is elected to serve sequentially consistent reads within the DC
  // 1 node within a shard in a DC
  PRIMARY_FOLLOWER = 2;
  // All other members of the raft quorum which are not master / primary follower.
  // Serving eventually consistent reads
  SECONDARY_FOLLOWER = 3;
  // Slave with committed entry within some bound of its master and able to serve read requests
  ACTIVE_SLAVE = 4;
}

message HealthCheckRequest {

  // Specifies the name of the service whose health the client needs to check
  optional string service = 1;
}

message HealthCheckResponse {

  enum ServingStatus {

    // The status of the service is unknown. This state is often seen at the startup of the service.
    UNKNOWN = 0;

    // The service is up and ready to serve requests
    SERVING = 1;

    // The service is unable to serve any requests at the time.
    NOT_SERVING = 2;

    // The service name passed by the client is not known
    // Used only by the Watch method.
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
}

